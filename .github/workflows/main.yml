name: Weather Notify CI/CD pipeline

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev
    - name: Lint with pycodestyle(pep8)
      run: |
        pipenv run pycodestyle .  --ignore=E501
    - name: Test with pylint
      run: |
        pipenv run pylint -E foreca_notify.py
    - name: Check for PEP 508 requirements and vulnerabilities
      run: |
        pipenv check
    - name: Build Docker image
      run: |
        docker build . --file Dockerfile --tag python-weather-notify:latest
    - name: Push Docker image to ACR
      env: 
       DOCKER_REGISTRY_PW: ${{ secrets.DOCKER_REGISTRY_PW }}    
      run: |
        docker login -u martinacrdev -p "${DOCKER_REGISTRY_PW}" martinacrdev.azurecr.io
        docker tag python-weather-notify:latest martinacrdev.azurecr.io/python-weather-notify:latest
        docker push martinacrdev.azurecr.io/python-weather-notify:latest

  test:
    needs: [build]

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: engineerd/setup-kind@v0.1.0
      with:
            version: "v0.5.0"
    - name: Docker image pull and container run
      env: 
       MS_TEAMS_TOKEN: ${{ secrets.MS_TEAMS_TOKEN }}
       TWILIO_SID: ${{ secrets.TWILIO_SID }}
       TWILIO_TOKEN: ${{ secrets.TWILIO_TOKEN }}
       TWILIO_SMS_FROM: ${{ secrets.TWILIO_SMS_FROM }}
       TWILIO_SMS_TO: ${{ secrets.TWILIO_SMS_TO }}
       DOCKER_REGISTRY_PW: ${{ secrets.DOCKER_REGISTRY_PW }}
       
      run: |
       docker login -u martinacrdev -p "${DOCKER_REGISTRY_PW}" martinacrdev.azurecr.io
       docker pull martinacrdev.azurecr.io/python-weather-notify:latest
       docker run --rm -e MS_TEAMS_TOKEN="${MS_TEAMS_TOKEN}" -e TWILIO_SID="${TWILIO_SID}" -e TWILIO_TOKEN="${TWILIO_TOKEN}" -e TWILIO_SMS_FROM="${TWILIO_SMS_FROM}" -e TWILIO_SMS_TO="${TWILIO_SMS_TO}" martinacrdev.azurecr.io/python-weather-notify:latest        
    - name: Testing on k8s kind cluster - secrets
      env: 
       MS_TEAMS_TOKEN: ${{ secrets.MS_TEAMS_TOKEN }}
       TWILIO_SID: ${{ secrets.TWILIO_SID }}
       TWILIO_TOKEN: ${{ secrets.TWILIO_TOKEN }}
       TWILIO_SMS_FROM: ${{ secrets.TWILIO_SMS_FROM }}
       TWILIO_SMS_TO: ${{ secrets.TWILIO_SMS_TO }}
       
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        kubectl create secret generic ms-teams-token --from-literal=hook="${MS_TEAMS_TOKEN}"
        kubectl create secret generic twilio-sid --from-literal=value="${TWILIO_SID}"
        kubectl create secret generic twilio-token --from-literal=value="${TWILIO_TOKEN}"
        kubectl create secret generic twilio-sms-from --from-literal=value="${TWILIO_SMS_FROM}"
        kubectl create secret generic twilio-sms-to --from-literal=value="${TWILIO_SMS_TO}"
        kubectl get secrets
        kubectl cluster-info
    - name: Testing on k8s kind cluster - cron deploy
      env: 
       DOCKER_REGISTRY_PW: ${{ secrets.DOCKER_REGISTRY_PW }}
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        docker login -u martinacrdev -p "${DOCKER_REGISTRY_PW}" martinacrdev.azurecr.io
        docker pull martinacrdev.azurecr.io/python-weather-notify:latest
        # kind load docker-image python-weather-notify:latest
        kubectl apply -f k8s/cron.yaml
        kubectl get cronjobs
        kubectl create job --from=cronjob/foreca-weather-notification weather-notify-001
        kubectl describe jobs/weather-notify-001
        kubectl describe pods/$(kubectl get pods --selector=job-name=weather-notify-001 --output=jsonpath={.items\[\].metadata.name})
        # kubectl wait --for=condition=Ready pods --all --namespace default       
        # kubectl logs $(kubectl get pods --selector=job-name=weather-notify-001 --output=jsonpath={.items\[\].metadata.name})

  deploy:
    needs: [test]

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: deploy cron resource to k8s cluster
      uses: steebchen/kubectl@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: '"apply -f k8s/cron.yaml"'
    - name: verify cron resource
      uses: steebchen/kubectl@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: '"get cronjobs"'